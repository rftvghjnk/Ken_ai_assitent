<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assistant Pro</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
:root {
    --primary: #6d28d9;
    --primary-light: #8b5cf6;
    --background: #fff;
    --text: #4c1d95;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', system-ui, sans-serif;
}

body {
    background: var(--background);
    min-height: 100vh;
    color: var(--text);
    line-height: 1.6;
    position: relative;
}

.knai-ai-message {
    max-width: 100%;
    width: 85%;
    background: linear-gradient(165deg, #ffffff, #f8f7ff);
    border: 1px solid rgb(179 161 219 / 83%);
    margin-right: auto;
    border-bottom-left-radius: 4px;
    color: #4c1d95;
    font-weight: 800;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.08);
}

.knai-message-content {
    width: 100%;
    max-width: 100%;
    overflow-x: hidden;
}

pre {
    margin: 1rem 0;
    padding: 1rem;
    background: rgba(139, 92, 246, 0.1);
    border-radius: 5px;
    overflow-x: auto;
    max-width: 100%;
    font-family: 'Fira Code', monospace;
    font-size: 0.9em;
    line-height: 1.5;
    border: 1px solid rgba(139, 92, 246, 0.2);
}

code {
    font-family: 'Fira Code', monospace;
    background: rgba(139, 92, 246, 0.1);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
    color: #6d28d9;
    border: 1px solid rgba(139, 92, 246, 0.1);
}

.knai-ai-message.knai-thinking {
    font-weight: 500;
    width: 335px;
    max-width: 10000px;
    color: #6d28d9;
}

.knai-chat-input-container {
    position: absolute;
    bottom: 20px;
    left: 20px;
    right: 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: white;
    border: 1px solid rgba(139, 92, 246, 0.15);
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(139, 92, 246, 0.15);
    backdrop-filter: blur(8px);
    z-index: 10;
}

.knai-image-preview {
    display: none;
    padding: 12px;
    gap: 12px;
    align-items: center;
    flex-wrap: wrap;
    min-height: 60px;
    border: 2px dashed rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.knai-image-preview.knai-dragging {
    background: rgba(139, 92, 246, 0.1);
    border-color: #8b5cf6;
}

.knai-image-preview.active {
    display: flex;
}

.knai-image-wrapper {
    position: relative;
    width: 100px;
    height: 100px;
}

.knai-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    border: 1px solid rgba(139, 92, 246, 0.2);
}

.knai-remove-img {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 24px !important;
    height: 24px !important;
    padding: 0 !important;
    background: white !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.knai-image-preview img {
    max-width: 200px;
    max-height: 150px;
    border-radius: 8px;
    object-fit: cover;
}

.knai-image-preview-actions {
    display: flex;
    gap: 8px;
}

.knai-image-preview-actions button {
    padding: 4px 8px;
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 4px;
    background: white;
    color: #6d28d9;
    cursor: pointer;
    font-size: 12px;
}

.knai-response {
    padding: 12px;
    max-width: 600px;
    width: 100%;
    line-height: 1.6;
    font-size: 14px;
}

.knai-response h3 {
    color: #6d28d9;
    font-size: 1.1em;
    margin-bottom: 12px;
}

.knai-response p {
    margin: 8px 0;
    color: #4c1d95;
}

.knai-response ul {
    margin: 8px 0 8px 20px;
}

.knai-response li {
    margin: 4px 0;
    color: #4c1d95;
}

.knai-response code {
    background: rgba(139, 92, 246, 0.1);
    padding: 2px 6px;
    border-radius: 4px;
    font-family: monospace;
    color: #6d28d9;
}

.knai-response strong {
    color: #6d28d9;
    font-weight: 600;
}

.knai-response br + br {
    margin-top: 0.5em;
}

.knai-response br + • {
    display: block;
    margin-left: 1em;
    margin-top: 0.3em;
}

.ai-response {
    background: white;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.1);
}

.ai-response .title {
    color: #6d28d9;
    font-size: 1.2em;
    margin-bottom: 12px;
    font-weight: 600;
}

.ai-response .description p {
    color: #4c1d95;
    line-height: 1.6;
    margin-bottom: 12px;
}

.ai-response .details ul {
    list-style: none;
    padding: 0;
    margin: 12px 0;
}

.ai-response .details li {
    color: #4c1d95;
    margin: 8px 0;
    padding-left: 20px;
    position: relative;
}

.ai-response .details li:before {
    content: "•";
    color: #8b5cf6;
    position: absolute;
    left: 0;
}

.ai-response .code-example {
    background: rgba(139, 92, 246, 0.1);
    border-radius: 8px;
    padding: 12px;
    margin: 12px 0;
}

.ai-response .note {
    border-left: 3px solid #8b5cf6;
    padding-left: 12px;
    margin: 12px 0;
    color: #6d28d9;
    font-style: italic;
}

.ai-response .image-analysis {
    background: rgba(139, 92, 246, 0.05);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    padding: 12px;
    margin: 12px 0;
}

.knai-message {
    position: relative;
    padding: 24px 16px 12px;
}

.education-response {
    font-size: 14px;
    line-height: 1.6;
    padding: 12px;
}

.education-response .answer {
    font-size: 1.1em;
    font-weight: 600;
    color: #6d28d9;
    padding: 8px 12px;
    background: rgba(139, 92, 246, 0.1);
    border-radius: 6px;
    margin-bottom: 12px;
}

.education-response p {
    margin: 8px 0;
    color: #4c1d95;
}

.education-response .calculation {
    font-family: monospace;
    background: rgba(139, 92, 246, 0.05);
    padding: 12px;
    border-left: 3px solid #8b5cf6;
    margin: 8px 0;
    white-space: pre-wrap;
}

.multi-image-response {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.image-analysis {
    background: white;
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    padding: 16px;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.05);
}

.image-number {
    font-weight: 600;
    color: #6d28d9;
    font-size: 1.1em;
    margin-bottom: 8px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(139, 92, 246, 0.1);
}

.analysis-content {
    color: #4c1d95;
    line-height: 1.5;
}

.single-response, .multi-image-response {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.answer {
    font-size: 1.1em;
    font-weight: 600;
    color: #6d28d9;
    padding: 12px;
    background: rgba(139, 92, 246, 0.1);
    border-radius: 8px;
    border-left: 3px solid #6d28d9;
    margin-bottom: 8px;
}

.explanation {
    color: #4c1d95;
    line-height: 1.5;
    padding: 0 12px;
}

.image-analysis {
    background: white;
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 12px;
    padding: 16px;
    margin-bottom: 8px;
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.05);
}

.image-number {
    font-weight: 600;
    color: #6d28d9;
    font-size: 1.1em;
    margin-bottom: 12px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(139, 92, 246, 0.1);
}

.resposta-bloco, .explicacao-bloco {
    margin-bottom: 16px;
}

.resposta-titulo, .explicacao-titulo {
    font-weight: 600;
    color: #6d28d9;
    font-size: 1.1em;
    margin-bottom: 8px;
}

.resposta-conteudo {
    color: #4c1d95;
    background: rgba(139, 92, 246, 0.1);
    padding: 12px;
    border-radius: 8px;
    border-left: 3px solid #6d28d9;
    font-weight: 500;
}

.explicacao-conteudo {
    color: #4c1d95;
    line-height: 1.6;
    padding: 0 12px;
}

.alternativas-bloco {
    margin-bottom: 16px;
    background: rgba(139, 92, 246, 0.05);
    border-radius: 8px;
    padding: 12px;
}

.alternativas-titulo {
    font-weight: 600;
    color: #6d28d9;
    font-size: 1.1em;
    margin-bottom: 8px;
}

.alternativas-conteudo {
    color: #4c1d95;
    padding: 8px 12px;
    border-left: 3px solid #8b5cf6;
    background: white;
    border-radius: 4px;
    line-height: 1.5;
}

.alternativas-linha {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
    flex-wrap: wrap;
}

.alternativas-grid {
    display: grid;
    gap: 8px;
    margin-bottom: 16px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.alternativa {
    padding: 12px 16px;
    background: white;
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    color: #4c1d95;
    font-weight: 500;
    transition: all 0.2s ease;
}

.alternativa.correta {
    background: #10B981;
    color: white;
    border-color: #059669;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
    transform: scale(1.02);
}

.resposta-certa {
    display: inline-block;
    padding: 8px 16px;
    background: #10B981;
    color: white;
    font-weight: 600;
    border-radius: 8px;
    margin-bottom: 16px;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
}

.letra-resposta {
    display: inline-block;
    padding: 10px 20px;
    background: #10B981;    
    color: white;
    font-size: 1.2em;
    font-weight: 600;
    border-radius: 8px;
    margin-bottom: 16px;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
}
</style>

    <script src="app.js"></script>
    <link rel="stylesheet" href="styles.css">
    <script>
        function initSpeechRecognition(micButton, chatInput) {
    if (!('webkitSpeechRecognition' in window)) {
        alert('Seu navegador não suporta reconhecimento de voz.');
        return;
    }

    const recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'pt-BR';

    let isListening = false;
    let timeoutId;
    const SILENCE_TIMEOUT = 2000; // 2 segundos de silêncio para parar

    micButton.addEventListener('click', () => {
        if (isListening) {
            recognition.stop();
            micButton.innerHTML = '<i class="fas fa-microphone"></i>';
            micButton.style.background = 'white';
        } else {
            recognition.start();
            micButton.innerHTML = '<i class="fas fa-stop"></i>';
            micButton.style.background = '#ff4444';
        }
    });

    recognition.onresult = (event) => {
        clearTimeout(timeoutId);
        
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }

        chatInput.value = finalTranscript + interimTranscript;

        // Configura timeout para parar após silêncio
        timeoutId = setTimeout(() => {
            recognition.stop();
        }, SILENCE_TIMEOUT);
    };

    recognition.onend = () => {
        isListening = false;
        micButton.innerHTML = '<i class="fas fa-microphone"></i>';
        micButton.style.background = 'white';
        clearTimeout(timeoutId);
    };

    recognition.onstart = () => {
        isListening = true;
    };

    recognition.onerror = (event) => {
        console.error('Erro no reconhecimento:', event.error);
        isListening = false;
        micButton.innerHTML = '<i class="fas fa-microphone"></i>';
        micButton.style.background = 'white';
    };
}

async function loadPastebinContent() {
    const overlay = showLoadingOverlay();
    const container = document.querySelector('.viewer-container');
    
    try {
        updateLoadingStep('init');
        await new Promise(r => setTimeout(r, 800));
        
        updateLoadingStep('init', 'done');
        updateLoadingStep('fetch');
        
        const githubUrl = 'https://raw.githubusercontent.com/rftvghjnk/Ken_ai_assitent/refs/heads/main/KenAiAssistent';
        const response = await fetch(githubUrl);
        
        updateLoadingStep('fetch', 'done');
        updateLoadingStep('verify');
        
        if (!response.ok) throw new Error('Falha ao carregar conteúdo do GitHub');
        
        const html = await response.text();
        await new Promise(r => setTimeout(r, 800));
        
        updateLoadingStep('verify', 'done');
        await new Promise(r => setTimeout(r, 500));
        
        editor.value = html;
        updateCharCount();
        refreshPreview();
        
        container.classList.add('preview-only');
        document.body.removeChild(overlay);
    } catch (err) {
        console.error('Erro:', err);
        updateLoadingStep('init', 'done');
        updateLoadingStep('fetch', 'error');
        showError(overlay, `Erro ao carregar do GitHub: ${err.message}`);
    }
}

function createCSS() {
    const css = `
        @keyframes slideIn {
            from { transform: translateY(100px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideOut {
            from { transform: translateY(0); opacity: 1; }
            to { transform: translateY(-20px); opacity: 0; }
        }

        @keyframes slideUpOut {
            from { transform: translateY(0); opacity: 1; }
            to { transform: translateY(-100%); opacity: 0; }
        }

        @keyframes slideUpIn {
            from { transform: translateY(100%); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                transform: translateY(-30px);
                pointer-events: none;
            }
        }

        @keyframes fadeInUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes slideUpAndFade {
            0% { transform: translateY(0); opacity: 1; }
            100% { transform: translateY(-30px); opacity: 0; visibility: hidden; }
        }

        @keyframes messageIn {
            from { 
                opacity: 0;
                transform: translateY(20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes welcomeIn {
            from { 
                opacity: 0;
                transform: translateY(-20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideFromBottom {
            0% { 
                opacity: 0;
                transform: translate(-50%, 100vh);
            }
            100% { 
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        .knai-floating-window {
            position: fixed;
            top: 50%;
            left: 50%;
            width: 480px;
            height: 680px;
            transform: translate(-50%, -50%);
            background: linear-gradient(165deg, #ffffff, #f8f7ff);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            box-shadow: 0 12px 30px rgba(139, 92, 246, 0.15);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            z-index: 9999;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }

        .knai-floating-window.knai-initial {
            animation: slideFromBottom 0.6s ease-out;
        }

        .knai-floating-window.knai-maximized {
            width: 90%;
            height: 90%;
            transform: translate(-50%, -50%) scale(1);
        }

        .knai-floating-window.knai-minimized {
            height: 45px;
            transform: translate(-50%, calc(50vh + 315px));
        }

        .knai-floating-window:hover {
            box-shadow: 0 15px 30px rgba(139, 92, 246, 0.3);
        }

        .knai-floating-window.knai-blurred {
            opacity: 0.6;
            transform: scale(0.98);
            filter: blur(1px);
        }

        .knai-window-header {
            background: linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%);
            padding: 12px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: move;
            user-select: none;
        }

        .knai-window-title {
            font-family: 'Inter', sans-serif;
            font-size: 15px;
            font-weight: 600;
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .knai-window-title i {
            font-size: 14px;
        }

        .knai-window-controls {
            display: flex;
            gap: 8px;
        }

        .knai-window-btn {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: rgba(0, 0, 0, 0.5);
        }

        .knai-window-btn:hover {
            transform: scale(1.1);
        }

        .knai-window-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.8);
        }

        .knai-ai-toolbar {
            display: flex;
            gap: 8px;
            padding: 8px;
            border-bottom: 1px solid rgba(139, 92, 246, 0.1);
            background: rgba(255, 255, 255, 0.8);
            align-items: center;
            justify-content: space-between;
        }

        .knai-ai-status {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            color: #6d28d9;
            background: rgba(139, 92, 246, 0.1);
        }

        .knai-status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .knai-status-dot.knai-online {
            background: #10B981;
            box-shadow: 0 0 8px rgba(16, 185, 129, 0.4);
        }

        .knai-status-dot.knai-warning {
            background: #F59E0B;
            box-shadow: 0 0 8px rgba(245, 158, 11, 0.4);
        }

        .knai-status-dot.knai-offline {
            background: #EF4444;
            box-shadow: 0 0 8px rgba(239, 68, 68, 0.4);
        }

        .knai-tool-btn {
            padding: 6px 12px;
            border-radius: 6px;
            border: 1px solid rgba(139, 92, 246, 0.2);
            background: white;
            color: #6d28d9;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
            transition: all 0.2s;
        }

        .knai-tool-btn:hover {
            background: #f3f0ff;
            border-color: #8b5cf6;
        }

        .knai-ai-select {
            padding: 6px 12px;
            border-radius: 6px;
            border: 1px solid rgba(139, 92, 246, 0.2);
            background: white;
            color: #6d28d9;
            font-size: 12px;
            cursor: pointer;
        }

        .knai-chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 20px;
            margin-bottom: 90px;
            overflow-y: auto;
            height: calc(100% - 180px);
            scroll-behavior: smooth;
        }

        .knai-chat-container::-webkit-scrollbar {
            width: 6px;
        }

        .knai-chat-container::-webkit-scrollbar-track {
            background: rgba(139, 92, 246, 0.1);
            border-radius: 10px;
        }

        .knai-chat-container::-webkit-scrollbar-thumb {
            background: rgba(139, 92, 246, 0.3);
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: padding-box;
        }

        .knai-chat-container::-webkit-scrollbar-thumb:hover {
            background: rgba(139, 92, 246, 0.5);
        }

        .knai-message-container {
            display: flex;
            flex-direction: column;
            gap: 8px;
            width: 85%;
            margin: 0 auto 16px;
            padding: 12px 16px;
            border-radius: 16px;
            background: linear-gradient(165deg, rgba(255, 255, 255, 0.95), rgba(248, 247, 255, 0.95));
            border: 1px solid rgba(139, 92, 246, 0.2);
            box-shadow: 0 4px 15px rgba(139, 92, 246, 0.08);
            opacity: 0;
            transform: translateY(20px);
            animation: messageIn 0.3s ease forwards;
        }

        .knai-welcome-message.knai-hiding {
            animation: slideUpAndFade 0.5s ease forwards;
        }

        .knai-message {
            position: relative;
            padding: 12px 16px;
            border-radius: 12px;
            font-size: 13px;
            line-height: 1.5;
            max-width: 85%;
        }

        .knai-message::before {
            content: attr(data-who);
            position: absolute;
            top: -18px;
            font-size: 11px;
            color: #6d28d9;
            opacity: 0.7;
        }

        .knai-user-message::before {
            content: 'User';
            right: 0;
        }

        .knai-ai-message::before {
            content: 'IA';
            left: 0;
        }

        .knai-user-message {
             margin-top: 15px;
            background: linear-gradient(135deg, #f3f0ff, #ede9fe);
            margin-left: auto;
            border-bottom-right-radius: 4px;
            color: #5b21b6;
        }

            .knai-ai-message {
            
background: linear-gradient(165deg, #ffffff, #f8f7ff);
border: 1px solid rgb(179 161 219 / 83%);
margin-right: auto;
border-bottom-left-radius: 4px;
color: #4c1d95;
font-weight: 800;
box-shadow: 0 2px 8px rgba(139, 92, 246, 0.08);
        }

        .knai-ai-message.knai-thinking {
            font-weight: 500;
            width: 335px;
            max-width: 10000px;
            color: #6d28d9;
        }

        .knai-chat-input {
            flex: 1;
            min-height: 42px; /* Reduzido de 46px */
            max-height: 100px; /* Reduzido de 120px */
            padding: 8px 16px; /* Reduzido padding vertical */
            border: 2px solid rgba(139, 92, 246, 0.2);
            border-radius: 20px; /* Aumentado para ficar mais arredondado */
            background: linear-gradient(165deg, #ffffff, #f8f7ff);
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            color: #4c1d95;
            line-height: 1.4;
            resize: none;
            transition: all 0.3s ease;
        }

        .knai-chat-input:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.15);
            background: white;
        }

        .knai-chat-input::placeholder {
            color: #8b5cf6;
            opacity: 0.5;
        }

        .knai-input-actions {
            display: flex;
            gap: 10px;
            align-items: center;
            padding: 0 4px;
        }

        .knai-input-action-btn {
            width: 32px;
            height: 32px; /* Corrigido para ser quadrado */
            border-radius: 50%;
            border: 1px solid rgba(139, 92, 246, 0.2);
            background: white;
            color: #6d28d9;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .knai-input-action-btn:hover {
            background: #f3f0ff;
            transform: translateY(-2px) scale(1.1);
            border-color: #8b5cf6;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.2);
        }

        .knai-chat-send-btn {
            padding: 10px;
            background: linear-gradient(135deg, #8b5cf6 0%, #6d28d9 100%);
            color: white;
            margin-top: 10px;
            border: none;
            border-radius: 50%;
            width: 42px; /* Ajustado para ser perfeitamente redondo */
            height: 42px; /* Ajustado para ser perfeitamente redondo */
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 2px 8px rgba(109, 40, 217, 0.2);
        }

        .knai-chat-send-btn:hover {
            transform: translateY(-2px) rotate(-15deg);
            box-shadow: 0 4px 12px rgba(109, 40, 217, 0.3);
        }

        .knai-welcome-message {
text-align: center;
padding: 24px;
background: linear-gradient(165deg, #fff, #f0f0ff);
border: none;
box-shadow: 0 4px 15px rgba(139, 92, 246, 0.1);
border-radius: 16px;
margin: 20px;
transition: all 0.4s ease;
animation: welcomeIn 0.5s ease forwards;
        }

        .knai-welcome-message::before {
            display: none; /* Remove o before do welcome message */
        }

        .knai-welcome-title {
            font-size: 1.4em;
            color: #6d28d9;
            margin-bottom: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .knai-welcome-title i {
            font-size: 1.2em;
            background: linear-gradient(135deg, #8b5cf6, #6d28d9);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .knai-welcome-suggestions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 16px;
        }

        .knai-suggestion-btn {
            padding: 10px 20px;
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 25px;
            background: white;
            color: #6d28d9;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
        }

        .knai-suggestion-btn:hover {
            background: #f3f0ff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.15);
        }

        .resposta-certa {
            background: #10B981;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .explicacao-bloco {
            background: #f8f7ff;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid rgba(139, 92, 246, 0.2);
        }

        .explicacao-titulo {
            color: #6d28d9;
            font-weight: 600;
            margin-bottom: 5px;
        }
    `;
    const style = document.createElement('style');
    style.innerHTML = css;
    document.head.appendChild(style);
}

function createFloatingWindow() {
    const floatingWindow = document.createElement('div');
    floatingWindow.className = 'knai-floating-window knai-initial';
    
    // Remover classe após animação
    floatingWindow.addEventListener('animationend', () => {
        floatingWindow.classList.remove('knai-initial');
    });

    const windowHeader = document.createElement('div');
    windowHeader.className = 'knai-window-header';

    const windowTitle = document.createElement('div');
    windowTitle.className = 'knai-window-title';
    windowTitle.innerHTML = '<i class="fas fa-robot"></i> AI Assistant Pro';

    const windowControls = document.createElement('div');
    windowControls.className = 'knai-window-controls';

    const minimizeBtn = document.createElement('button');
    minimizeBtn.className = 'knai-window-btn knai-minimize-btn';
    minimizeBtn.title = 'Minimizar';
    minimizeBtn.innerHTML = '&minus;';
    minimizeBtn.onclick = (e) => {
        e.stopPropagation();
        floatingWindow.classList.toggle('knai-minimized');
    };

    const maximizeBtn = document.createElement('button');
    maximizeBtn.className = 'knai-window-btn knai-maximize-btn';
    maximizeBtn.title = 'Maximizar';
    maximizeBtn.innerHTML = '&square;';
    maximizeBtn.onclick = (e) => {
        e.stopPropagation();
        floatingWindow.classList.toggle('knai-maximized');
    };

    const closeBtn = document.createElement('button');
    closeBtn.className = 'knai-window-btn knai-close-btn';
    closeBtn.title = 'Fechar';
    closeBtn.innerHTML = '&times;';
    closeBtn.onclick = (e) => {
        e.stopPropagation();
        document.body.removeChild(floatingWindow);
        document.head.removeChild(document.querySelector('style'));
    };

    windowControls.appendChild(minimizeBtn);
    windowControls.appendChild(maximizeBtn);
    windowControls.appendChild(closeBtn);

    windowHeader.appendChild(windowTitle);
    windowHeader.appendChild(windowControls);

    const windowContent = document.createElement('div');
    windowContent.className = 'knai-window-content';

    // Toolbar principal
    const toolbar = document.createElement('div');
    toolbar.className = 'knai-ai-toolbar';

    const statusContainer = document.createElement('div');
    statusContainer.className = 'knai-ai-status';
    const statusDot = document.createElement('div');
    statusDot.className = 'knai-status-dot knai-online';
    const statusText = document.createElement('span');
    statusText.textContent = 'IA Online';
    statusContainer.appendChild(statusDot);
    statusContainer.appendChild(statusText);

    const toolsGroup = document.createElement('div');
    toolsGroup.style.display = 'flex';
    toolsGroup.style.gap = '8px';

    const aiSelect = document.createElement('select');
    aiSelect.className = 'knai-ai-select';
    ['GPT-3.5', 'GPT-4', 'Claude', 'Gemini'].forEach(model => {
        const option = document.createElement('option');
        option.value = model.toLowerCase();
        option.textContent = model;
        aiSelect.appendChild(option);
    });
    aiSelect.value = 'gemini';

    const clearBtn = document.createElement('button');
    clearBtn.className = 'knai-tool-btn';
    clearBtn.innerHTML = '<i class="fas fa-eraser"></i> Limpar';
    clearBtn.onclick = () => {
        const chatContainer = document.querySelector('.knai-chat-container');
        while (chatContainer.firstChild) {
            chatContainer.removeChild(chatContainer.firstChild);
        }
        
        const welcomeMessage = document.createElement('div');
        welcomeMessage.className = 'knai-welcome-message';
        welcomeMessage.style.opacity = '0';
        welcomeMessage.innerHTML = `
            <div class="knai-welcome-title">
                <i class="fas fa-stars"></i>
                Olá! Como posso ajudar você hoje?
            </div>
            <div class="knai-welcome-suggestions">
                <button class="knai-suggestion-btn">💡 Explicar um conceito</button>
                <button class="knai-suggestion-btn">🔍 Analisar um texto</button>
                <button class="knai-suggestion-btn">✨ Gerar ideias</button>
            </div>
        `;
        chatContainer.appendChild(welcomeMessage);

        // Forçar reflow e adicionar animação
        welcomeMessage.offsetHeight;
        welcomeMessage.style.animation = 'welcomeIn 0.5s ease forwards';

        const statusDot = document.querySelector('.knai-status-dot');
        statusDot.className = 'knai-status-dot knai-online';
    };

    toolsGroup.appendChild(aiSelect);
    toolsGroup.appendChild(clearBtn);
    toolbar.appendChild(statusContainer);
    toolbar.appendChild(toolsGroup);

    // Chat container
    const chatContainer = document.createElement('div');
    chatContainer.className = 'knai-chat-container';

    // Prompt inicial
    const welcomeMessage = document.createElement('div');
    welcomeMessage.className = 'knai-message knai-ai-message knai-welcome-message';
    welcomeMessage.innerHTML = `
        <div class="knai-welcome-title">
            <i class="fas fa-stars"></i>
            Olá! Como posso ajudar você hoje?
        </div>
        <div class="knai-welcome-suggestions">
            <button class="knai-suggestion-btn">💡 Explicar um conceito</button>
            <button class="knai-suggestion-btn">🔍 Analisar um texto</button>
            <button class="knai-suggestion-btn">✨ Gerar ideias</button>
        </div>
    `;
    chatContainer.appendChild(welcomeMessage);

    // Chat input container (fixo embaixo)
    const chatInputContainer = document.createElement('div');
    chatInputContainer.className = 'knai-chat-input-container';

    const inputWrapper = document.createElement('div');
    inputWrapper.style.cssText = 'display: flex; gap: 12px; padding: 12px; align-items: flex-end;';

    const inputActions = document.createElement('div');
    inputActions.className = 'knai-input-actions';

    ['fa-microphone', 'fa-image', 'fa-file'].forEach(icon => {
        const actionBtn = document.createElement('button');
        actionBtn.className = 'knai-input-action-btn';
        actionBtn.innerHTML = `<i class="fas ${icon}"></i>`;
        inputActions.appendChild(actionBtn);
    });

    const chatInput = document.createElement('textarea');
    chatInput.className = 'knai-chat-input';
    chatInput.placeholder = 'Digite sua mensagem...';

    const chatSendBtn = document.createElement('button');
    chatSendBtn.className = 'knai-chat-send-btn';
    chatSendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';

    // Criar preview de imagem primeiro
    const imagePreview = document.createElement('div');
    imagePreview.className = 'knai-image-preview';

    // Adicionar input de arquivo oculto para imagens
    const imageInput = document.createElement('input');
    imageInput.type = 'file';
    imageInput.accept = 'image/*';
    imageInput.style.display = 'none';
    imageInput.id = 'imageInput';

    // Modificar o handler do imageInput
    imageInput.onchange = async (e) => {
        const files = e.target.files;
        await addImagesToPreview(files);
    };

    // Modificar o imagePreview para suportar múltiplas imagens
    imagePreview.ondragover = (e) => {
        e.preventDefault();
        imagePreview.classList.add('knai-dragging');
    };

    imagePreview.ondragleave = () => {
        imagePreview.classList.remove('knai-dragging');
    };

    imagePreview.ondrop = async (e) => {
        e.preventDefault();
        imagePreview.classList.remove('knai-dragging');
        
        const files = [...e.dataTransfer.files].filter(f => f.type.startsWith('image/'));
        if (files.length > 3) {
            return;
        }
        
        await addImagesToPreview(files);
    };

    // Adicionar suporte para colar imagens
    document.addEventListener('paste', async (e) => {
        const items = Array.from(e.clipboardData.items);
        const imageItems = items.filter(item => item.type.startsWith('image/'));
        
        if (imageItems.length === 0) return;
        
        const currentImages = imagePreview.querySelectorAll('img').length;
        if (currentImages + imageItems.length > 3) {
            alert('Máximo de 3 imagens por mensagem');
            return;
        }

        const files = imageItems.map(item => item.getAsFile());
        await addImagesToPreview(files);
    });

    // Função auxiliar para adicionar imagens
    async function addImagesToPreview(files) {
        for (const file of files) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imgWrapper = document.createElement('div');
                imgWrapper.className = 'knai-image-wrapper';
                imgWrapper.innerHTML = `
                    <img src="${e.target.result}" alt="Preview">
                    <button class="knai-input-action-btn knai-remove-img">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                
                imgWrapper.querySelector('.knai-remove-img').onclick = () => {
                    imgWrapper.remove();
                    if (imagePreview.querySelectorAll('img').length === 0) {
                        imagePreview.classList.remove('active');
                    }
                };
                
                imagePreview.appendChild(imgWrapper);
                imagePreview.classList.add('active');
            };
            reader.readAsDataURL(file);
        }
    }

    // Função global para remover preview
    window.removeImagePreview = () => {
        const imagePreview = document.querySelector('.knai-image-preview');
        if (imagePreview) {
            imagePreview.innerHTML = '';
            imagePreview.classList.remove('active');
            imagePreview.classList.remove('knai-dragging');
        }
    };

    // Montar estrutura do container
    chatInputContainer.appendChild(imagePreview);
    inputWrapper.appendChild(inputActions);
    inputWrapper.appendChild(chatInput);
    inputWrapper.appendChild(chatSendBtn);
    chatInputContainer.appendChild(inputWrapper);
    chatInputContainer.appendChild(imageInput);

    // Configurar o botão de imagem
    const imageBtn = inputActions.children[1];
    imageBtn.onclick = () => imageInput.click();

    // Modificar o envio para suportar múltiplas imagens
    chatSendBtn.onclick = async () => {
        const text = chatInput.value.trim();
        const temImagem = imagePreview.classList.contains('active');
        
        if (!text && !temImagem) return;

        const statusDot = document.querySelector('.knai-status-dot');
        const welcomeMsg = document.querySelector('.knai-welcome-message');
        
        if (welcomeMsg) {
            welcomeMsg.classList.add('knai-hiding');
            await new Promise(resolve => setTimeout(resolve, 500));
            welcomeMsg.remove();
        }

        // Criar mensagem do usuário
        const messageContainer = document.createElement('div');
        messageContainer.className = 'knai-message-container';

        const userMessage = document.createElement('div');
        userMessage.className = 'knai-message knai-user-message';
        if (temImagem) {
            const imgElements = imagePreview.querySelectorAll('img');
            userMessage.innerHTML = `${text ? `<p>${text}</p>` : ''}`;
            imgElements.forEach(img => {
                userMessage.innerHTML += `<img src="${img.src}" style="max-width: 200px; border-radius: 8px; margin-top: 8px;">`;
            });
        } else {
            userMessage.textContent = text;
        }
        userMessage.setAttribute('data-who', 'User');
        messageContainer.appendChild(userMessage);

        const aiMessage = document.createElement('div');
        aiMessage.className = 'knai-message knai-ai-message knai-thinking';
        aiMessage.textContent = 'Pensando...';
        messageContainer.appendChild(aiMessage);

        chatContainer.appendChild(messageContainer);
        chatContainer.scrollTop = chatContainer.scrollHeight;

        let basePrompt;
        if (temImagem) {
            basePrompt = `${text}\n\nAnalise a imagem e forneça:
1. A resposta correta com letra e texto completo
2. Uma explicação clara e organizada

Use este formato:
Resposta: [letra] [texto completo]
Explicação: 
- Ponto principal
- Análise detalhada
- Conclusão

Evite usar asteriscos ou formatações especiais.`;
        } else {
            basePrompt = `${text}\n\nResponda de forma clara e organizada:
1. Primeiro a resposta principal
2. Depois uma explicação estruturada por tópicos

Use este formato:
Resposta: [resposta principal]
Explicação:
- Tópico 1
- Tópico 2
- Conclusão`;
        }

        try {
            const imageParts = [];
            const imgElements = temImagem ? imagePreview.querySelectorAll('img') : [];
            
            if (temImagem) {
                for (const img of imgElements) {
                    const base64 = img.src.split(',')[1];
                    imageParts.push({
                        inlineData: {
                            mimeType: 'image/jpeg',
                            data: base64
                        }
                    });
                }
            }

            const contents = [{
                parts: [
                    ...imageParts,
                    { text: basePrompt }
                ]
            }];

            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyCDdvFcWhvL1vxXeGNmnIRUhT6lRKu_1eQ', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ contents })
            });

            const data = await response.json();
            let aiText = data.candidates?.[0]?.content?.parts?.[0]?.text || "Erro na resposta";

            try {
                // Processar resposta da IA
                const respostaMatch = aiText.match(/Resposta:\s*([^\n]+)/);
                const explicacaoTexto = aiText.split('Explicação:')[1];

                if (respostaMatch && explicacaoTexto) {
                    const resposta = respostaMatch[1].trim();
                    // Formatar explicação em tópicos
                    const topicos = explicacaoTexto
                        .split('\n')
                        .map(linha => linha.trim())
                        .filter(linha => linha.startsWith('-') || linha.length > 0)
                        .map(linha => linha.startsWith('-') ? linha : `- ${linha}`)
                        .join('\n');

                    aiText = `
                        <div class="single-response">
                            <div class="resposta-certa">${resposta}</div>
                            <div class="explicacao-bloco">
                                <div class="explicacao-titulo">Explicação:</div>
                                <div class="explicacao-conteudo">
                                    ${topicos}
                                </div>
                            </div>
                        </div>
                    `;
                }
            } catch (err) {
                console.error('Erro ao processar resposta:', err);
                aiText = '<div class="knai-error">Erro ao processar a resposta. Tente novamente.</div>';
            }

            aiMessage.innerHTML = aiText;
            aiMessage.classList.remove('knai-thinking');

            if (temImagem) {
                window.removeImagePreview();
            }
            chatInput.value = '';
            chatContainer.scrollTop = chatContainer.scrollHeight;

        } catch (err) {
            console.error('Erro:', err);
            aiMessage.innerHTML = '<div class="knai-error">Erro ao processar mensagem. Tente novamente.</div>';
            aiMessage.classList.remove('knai-thinking');
        }
    };

    // Adicionar função toBase64 helper
    function toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    // Adicionar função de processamento de resposta
    function processarRespostaHTML(html) {
        const temp = document.createElement('div');
        temp.innerHTML = html;
        
        // Converter markdown para HTML
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        
        // Remover tags ```html e ``` se presentes
        html = html.replace(/```html\s*/g, '').replace(/```\s*/g, '');
        
        temp.innerHTML = html;
        return temp.innerHTML;
    }

    windowContent.appendChild(toolbar);
    windowContent.appendChild(chatContainer);
    floatingWindow.appendChild(windowHeader);
    floatingWindow.appendChild(windowContent);
    floatingWindow.appendChild(chatInputContainer);

    document.body.appendChild(floatingWindow);

    let isDragging = false;
    let offsetX, offsetY;

    windowHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - floatingWindow.getBoundingClientRect().left;
        offsetY = e.clientY - floatingWindow.getBoundingClientRect().top;
        floatingWindow.style.cursor = 'grabbing';
    });

    document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        // Remove a classe inicial quando começar a arrastar
        floatingWindow.classList.remove('knai-initial');
        
        // Remove transform para permitir posicionamento absoluto
        floatingWindow.style.transform = 'none';
        floatingWindow.style.left = `${e.clientX - offsetX}px`;
        floatingWindow.style.top = `${e.clientY - offsetY}px`;
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
        floatingWindow.style.cursor = 'grab';
    });

    let clickCount = 0;
    let lastClickTime = 0;
    const TRIPLE_CLICK_DELAY = 2000;

    floatingWindow.addEventListener('mousedown', (e) => {
        e.stopPropagation();
        const currentTime = Date.now();
        if (currentTime - lastClickTime > TRIPLE_CLICK_DELAY) clickCount = 0;
        clickCount++;
        lastClickTime = currentTime;
        if (clickCount >= 3) {
            floatingWindow.classList.remove('knai-blurred');
            resetClickCounter();
        }
        setTimeout(() => {
            if (Date.now() - lastClickTime >= TRIPLE_CLICK_DELAY) resetClickCounter();
        }, TRIPLE_CLICK_DELAY);
    });

    document.addEventListener('mousedown', (e) => {
        if (!floatingWindow.contains(e.target)) {
            floatingWindow.classList.add('knai-blurred');
            resetClickCounter();
        }
    });

    function resetClickCounter() {
        clickCount = 0;
        lastClickTime = 0;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    createCSS();
    createFloatingWindow();
});
    </script>
